# run this code in www.mermaidchart.com or your prefered IDE

sequenceDiagram
    actor Admin
    participant System
    participant ParkingSlot
    participant Ticket
    participant User
    participant Report
    
    Note over Admin,Report: Admin Login Flow
    
    Admin->>System: login(email, password, accountType=Admin)
    activate System
    System->>System: authenticateAdmin(email, password)
    System->>System: verifyAdminPrivileges()
    System-->>Admin: adminLoginSuccess(adminSession)
    deactivate System
    
    Note over Admin,Report: Add New Parking Slot Flow
    
    Admin->>System: addNewParkingSlot(slotNumber, slotType)
    activate System
    System->>System: validateSlotNumber(slotNumber)
    
    alt Slot Number Available
        System->>ParkingSlot: new ParkingSlot(slotNumber, slotType, occupied=false)
        activate ParkingSlot
        ParkingSlot-->>System: slotObject
        deactivate ParkingSlot
        
        System->>System: addSlotToSystem(slotObject)
        System-->>Admin: slotAddedSuccess(slotNumber)
    else Slot Number Already Exists
        System-->>Admin: slotExistsError()
    end
    deactivate System
    
    Note over Admin,Report: View Active Tickets Flow
    
    Admin->>System: viewAllActiveTickets()
    activate System
    System->>System: getAllUsers()
    loop For Each User
        System->>User: getActiveTickets()
        activate User
        User-->>System: userActiveTickets
        deactivate User
    end
    System->>System: aggregateAllTickets()
    System-->>Admin: displayActiveTickets(ticketsList)
    deactivate System
    
    Note over Admin,Report: Manually Process Payment Flow
    
    Admin->>System: searchTicketByPlateOrSlot(searchCriteria)
    activate System
    System->>System: findTicket(searchCriteria)
    System->>Ticket: getTicketDetails()
    activate Ticket
    Ticket-->>System: ticketDetails
    deactivate Ticket
    System-->>Admin: displayTicketDetails(ticketDetails)
    deactivate System
    
    Admin->>System: manualPayment(ticketID, paymentAmount)
    activate System
    System->>Ticket: calculateTotalFee()
    activate Ticket
    Ticket-->>System: totalFee
    deactivate Ticket
    
    alt Payment Amount Valid
        System->>Ticket: markAsPaid(paymentAmount)
        activate Ticket
        Ticket->>Ticket: setExitTime(currentTime)
        Ticket->>Ticket: setPaymentStatus(paid)
        Ticket-->>System: paymentProcessed
        deactivate Ticket
        
        System->>ParkingSlot: releaseSlot(slotNumber)
        activate ParkingSlot
        ParkingSlot->>ParkingSlot: setOccupied(false)
        ParkingSlot-->>System: slotReleased
        deactivate ParkingSlot
        
        System->>User: moveTicketToHistory(ticketObject)
        activate User
        User-->>System: ticketArchived
        deactivate User
        
        System-->>Admin: paymentSuccess(receipt)
    else Payment Amount Invalid
        System-->>Admin: paymentError(insufficientAmount)
    end
    deactivate System
    
    Note over Admin,Report: Generate Usage Report Flow
    
    Admin->>System: generateUsageReport(startDate, endDate)
    activate System
    System->>System: getAllUsers()
    loop For Each User
        System->>User: getTicketHistory(startDate, endDate)
        activate User
        User-->>System: userHistoricalTickets
        deactivate User
    end
    
    System->>Report: new Report(ticketsData, dateRange)
    activate Report
    Report->>Report: calculateTotalRevenue()
    Report->>Report: calculateParkingDuration()
    Report->>Report: analyzeVehicleTypes()
    Report->>Report: analyzePeakHours()
    Report-->>System: reportObject
    deactivate Report
    
    System-->>Admin: displayReport(reportObject)
    deactivate System
    
    Note over Admin,Report: View Registered Vehicles Flow
    
    Admin->>System: viewAllRegisteredVehicles()
    activate System
    System->>System: getAllUsers()
    loop For Each User
        System->>User: getVehicles()
        activate User
        User-->>System: userVehicles
        deactivate User
    end
    System->>System: aggregateVehicles()
    System-->>Admin: displayVehicleList(vehiclesList)
    deactivate System
    
    Note over Admin,Report: Logout Flow
    
    Admin->>System: logout()
    activate System
    System->>System: clearAdminSession()
    System-->>Admin: logoutSuccess()
    deactivate System
